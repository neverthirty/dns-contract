"Asm.fif" include
// automatically generated from `stdlib.fc` `dns-utils.fc` `root-dns.fc` 
PROGRAM{
  DECLPROC zero_address
  DECLPROC get_top_domain_bits
  DECLPROC read_domain_from_comment
  DECLPROC check_domain_string
  DECLPROC get_min_price_config
  DECLPROC get_min_price
  DECLPROC load_data
  123660 DECLMETHOD dnsresolve
  DECLPROC recv_internal
  zero_address PROC:<{
    // 
    0 PUSHINT	//  _0=0
    NEWC	//  _0=0 _1
    2 STU	//  _3
    ENDC	//  _4
    CTOS	//  _5
  }>
  get_top_domain_bits PROC:<{
    //  domain
    0 PUSHINT	//  domain i=0
    UNTIL:<{
      SWAP	//  i domain
      8 LDU	//  i char domain
      SWAP	//  i domain char
      0 EQINT	//  i domain need_break
      DUP	//  i domain need_break need_break
      NOT	//  i domain need_break _11
      IF:<{	//  i domain need_break
        s0 s2 XCHG	//  need_break domain i
        8 ADDCONST	//  need_break domain i
        s0 s2 XCHG	//  i domain need_break
      }>	//  i domain need_break
      s1 s2 XCHG	//  domain i need_break
    }>	//  domain i
    NIP	//  i
    DUP	//  i i
    0 EQINT	//  i _16
    201 THROWIF
  }>
  read_domain_from_comment PROC:<{
    //  in_msg_body
    NEWC	//  in_msg_body result
    UNTIL:<{
      OVER	//  in_msg_body result in_msg_body
      SBITS	//  in_msg_body result _6
      s1 s2 XCHG	//  result in_msg_body _6
      LDSLICEX	//  result _5 in_msg_body
      -ROT	//  in_msg_body result _5
      STSLICER	//  in_msg_body result
      OVER	//  in_msg_body result in_msg_body
      SREFS	//  in_msg_body result refs_len
      DUP	//  in_msg_body result refs_len refs_len
      0 EQINT	//  in_msg_body result refs_len need_break
      DUP	//  in_msg_body result refs_len need_break need_break
      NOT	//  in_msg_body result refs_len need_break _13
      IF:<{	//  in_msg_body result refs_len need_break
        SWAP	//  in_msg_body result need_break refs_len
        1 EQINT	//  in_msg_body result need_break _16
        202 THROWIFNOT
        s0 s2 XCHG	//  need_break result in_msg_body
        LDREF	//  need_break result _26 _25
        DROP	//  need_break result _18
        CTOS	//  need_break result in_msg_body
        s0 s2 XCHG	//  in_msg_body result need_break
      }>ELSE<{
        NIP	//  in_msg_body result need_break
      }>
    }>	//  in_msg_body result
    NIP	//  result
    ENDC	//  _21
    CTOS	//  _22
  }>
  check_domain_string PROC:<{
    //  domain
    0 PUSHINT	//  domain i=0
    OVER	//  domain i=0 domain
    SBITS	//  domain i=0 len
    UNTIL:<{
      2DUP	//  domain i len i len
      EQUAL	//  domain i len need_break
      DUP	//  domain i len need_break need_break
      NOT	//  domain i len need_break _8
      IF:<{	//  domain i len need_break
        DROP	//  domain i len
        s0 s2 XCHG	//  len i domain
        8 LDU	//  len i char domain
        OVER	//  len i char domain char
        47 GTINT	//  len i char domain _15
        s2 PUSH	//  len i char domain _15 char
        58 LESSINT	//  len i char domain _15 _17
        AND	//  len i char domain _18
        s2 PUSH	//  len i char domain _18 char
        96 GTINT	//  len i char domain _18 _20
        s0 s3 XCHG	//  len i _20 domain _18 char
        123 LESSINT	//  len i _20 domain _18 _22
        s1 s3 XCHG	//  len i _18 domain _20 _22
        AND	//  len i _18 domain _23
        s1 s2 XCHG	//  len i domain _18 _23
        OR	//  len i domain valid_char
        NOT	//  len i domain need_break
        DUP	//  len i domain need_break need_break
        NOT	//  len i domain need_break _26
        IF:<{	//  len i domain need_break
          s0 s2 XCHG	//  len need_break domain i
          8 ADDCONST	//  len need_break domain i
          s0 s2 XCHG	//  len i domain need_break
        }>	//  len i domain need_break
        s1 s3 XCHG	//  domain i len need_break
      }>	//  domain i len need_break
    }>	//  domain i len
    1 2 BLKDROP2	//  i len
    EQUAL	//  _29
  }>
  get_min_price_config PROC:<{
    //  domain_char_count
    DUP	//  domain_char_count domain_char_count
    1 EQINT	//  domain_char_count _2
    IFJMP:<{	//  domain_char_count
      DROP	// 
      2999 PUSHINT	//  _3=2999
      299 PUSHINT	//  _3=2999 _4=299
    }>	//  domain_char_count
    DUP	//  domain_char_count domain_char_count
    2 EQINT	//  domain_char_count _6
    IFJMP:<{	//  domain_char_count
      DROP	// 
      999 PUSHINT	//  _7=999
      99 PUSHINT	//  _7=999 _8=99
    }>	//  domain_char_count
    DUP	//  domain_char_count domain_char_count
    3 EQINT	//  domain_char_count _10
    IFJMP:<{	//  domain_char_count
      DROP	// 
      249 PUSHINT	//  _11=249
      25 PUSHINT	//  _11=249 _12=25
    }>	//  domain_char_count
    4 EQINT	//  _14
    IFJMP:<{	// 
      49 PUSHINT	//  _15=49
      5 PUSHINT	//  _15=49 _16=5
    }>	// 
    10 PUSHINT	//  _17=10
    1 PUSHINT	//  _17=10 _18=1
  }>
  get_min_price PROC:<{
    //  domain_bits_length now_time
    SWAP	//  now_time domain_bits_length
    3 RSHIFT#	//  now_time _5
    get_min_price_config CALLDICT	//  now_time start_min_price end_min_price
    SWAP
    1000000000 PUSHINT	//  now_time end_min_price start_min_price _7=1000000000
    MUL	//  now_time end_min_price start_min_price
    SWAP
    1000000000 PUSHINT	//  now_time start_min_price end_min_price _9=1000000000
    MUL	//  now_time start_min_price end_min_price
    s0 s2 XCHG
    1660986000 PUSHINT	//  end_min_price start_min_price now_time _12=1660986000
    SUB	//  end_min_price start_min_price seconds
    2592000 PUSHINT	//  end_min_price start_min_price seconds _15=2592000
    DIV	//  end_min_price start_min_price months
    DUP	//  end_min_price start_min_price months months
    21 GTINT	//  end_min_price start_min_price months _18
    IFJMP:<{	//  end_min_price start_min_price months
      2DROP	//  end_min_price
    }>	//  end_min_price start_min_price months
    1 2 BLKDROP2	//  start_min_price months
    REPEAT:<{	//  start_min_price
      90 MULCONST	//  _20
      100 PUSHINT	//  _20 _21=100
      DIV	//  start_min_price
    }>
  }>
  load_data PROCINLINE:<{
    // 
    c4 PUSH	//  _0
    CTOS	//  _1
    PLDDICT	//  _2
  }>
  dnsresolve PROC:<{
    //  subdomain category
    DROP	//  subdomain
    DUP	//  subdomain subdomain
    SBITS	//  subdomain _3
    8 PUSHINT	//  subdomain _3 _4=8
    MOD	//  subdomain _5
    0 EQINT	//  subdomain _7
    70 THROWIFNOT
    DUP	//  subdomain subdomain
    8 PLDI	//  subdomain _11
    0 EQINT	//  subdomain starts_with_zero_byte
    OVER	//  subdomain starts_with_zero_byte subdomain
    SBITS	//  subdomain starts_with_zero_byte _14
    8 EQINT	//  subdomain starts_with_zero_byte _16
    s1 s(-1) PUXC	//  subdomain starts_with_zero_byte starts_with_zero_byte _16
    AND	//  subdomain starts_with_zero_byte _17
    IFJMP:<{	//  subdomain starts_with_zero_byte
      2DROP	// 
      8 PUSHINT	//  _18=8
      PUSHNULL	//  _18=8 _19
    }>	//  subdomain starts_with_zero_byte
    DUP	//  subdomain starts_with_zero_byte starts_with_zero_byte
    IF:<{	//  subdomain starts_with_zero_byte
      SWAP	//  starts_with_zero_byte subdomain
      8 LDU	//  starts_with_zero_byte _52 _51
      NIP	//  starts_with_zero_byte subdomain
      SWAP	//  subdomain starts_with_zero_byte
    }>	//  subdomain starts_with_zero_byte
    OVER	//  subdomain starts_with_zero_byte subdomain
    get_top_domain_bits CALLDICT	//  subdomain starts_with_zero_byte top_subdomain_bits
    s1 s2 XCHG	//  starts_with_zero_byte subdomain top_subdomain_bits
    LDSLICEX	//  starts_with_zero_byte _54 _53
    DROP	//  starts_with_zero_byte top_subdomain
    DUP	//  starts_with_zero_byte top_subdomain top_subdomain
    HASHSU	//  starts_with_zero_byte top_subdomain top_subdomain_hash
    SWAP	//  starts_with_zero_byte top_subdomain_hash top_subdomain
    SBITS	//  starts_with_zero_byte top_subdomain_hash top_subdomain_bits
    load_data INLINECALLDICT	//  starts_with_zero_byte top_subdomain_hash top_subdomain_bits _34
    s1 s2 XCHG
    8 PUSHPOW2	//  starts_with_zero_byte top_subdomain_bits top_subdomain_hash _34 _35=256
    DICTUGET
    NULLSWAPIFNOT	//  starts_with_zero_byte top_subdomain_bits next_resolver_addresses r
    NOT	//  starts_with_zero_byte top_subdomain_bits next_resolver_addresses _37
    IFJMP:<{	//  starts_with_zero_byte top_subdomain_bits next_resolver_addresses
      3 BLKDROP	// 
      0 PUSHINT	//  _38=0
      PUSHNULL	//  _38=0 _39
    }>	//  starts_with_zero_byte top_subdomain_bits next_resolver_addresses
    47763 PUSHINT	//  starts_with_zero_byte top_subdomain_bits next_resolver_addresses _41=47763
    NEWC	//  starts_with_zero_byte top_subdomain_bits next_resolver_addresses _41=47763 _42
    16 STU	//  starts_with_zero_byte top_subdomain_bits next_resolver_addresses _44
    SWAP	//  starts_with_zero_byte top_subdomain_bits _44 next_resolver_addresses
    STSLICER	//  starts_with_zero_byte top_subdomain_bits _45
    ENDC	//  starts_with_zero_byte top_subdomain_bits result
    s0 s2 XCHG	//  result top_subdomain_bits starts_with_zero_byte
    IF:<{	//  result top_subdomain_bits
      8 PUSHINT	//  result top_subdomain_bits _47=8
    }>ELSE<{	//  result top_subdomain_bits
      0 PUSHINT	//  result top_subdomain_bits _47=0
    }>
    ADD	//  result _50
    SWAP	//  _50 result
  }>
  recv_internal PROC:<{
    //  msg_value in_msg_full in_msg_body
    3 BLKDROP	// 
  }>
}END>c
