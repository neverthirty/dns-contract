import TonWeb from "tonweb";
import { DictBuilder, Address, Builder, Cell } from "ton";
import { DNS_ITEM_CODE_HEX } from "./dns-item";

class TonWebCell extends TonWeb["boc"]["Cell"] {}

const

class DnsCollection extends TonWeb["Contract"] {
    constructor(provider, options) {
        options.code = TonWebCell.oneFromBoc(DNS_COLLECTION_CODE_HEX);
        super(provider, options);
    }

    public createDataCell(): any {
        const b = new Builder();
        b.storeAddress(Address.parse((this.options as any).ownerAddress));
        b.storeRef((new Builder()).storeUint(1, 8).storeBuffer(Buffer.from((this.options as any).infoUrl)).endCell());
        b.storeRef(Cell.fromBoc(Buffer.from(DNS_ITEM_CODE_HEX, "hex"))[0]);
        b.storeRef(this.createRoyaltyCell());
        return TonWebCell.fromBoc(b.endCell().toBoc().toString("hex"))[0];
    }

    private createRoyaltyCell(): Cell {
        const royaltyCell = new Builder();
        royaltyCell.storeUint(40, 16);
        royaltyCell.storeUint(1000, 16);
        royaltyCell.storeAddress(Address.parse((this.options as any).ownerAddress));
        return royaltyCell.endCell();
    }

    public createMintBody(domain: string, withAuction: boolean): any {
        const b = new Builder();
        b.storeUint(withAuction ? 0: 1, 32);
        b.storeBuffer(Buffer.from(domain, "ascii"))

        return TonWebCell.fromBoc(b.endCell().toBoc().toString("hex"))[0];
    }

    public createFillUpBody(): any {
        const b = new Builder();
        b.storeUint(0x370fec51, 32);
        b.storeRef((new Builder().endCell()));

        return TonWebCell.fromBoc(b.endCell().toBoc().toString("hex"))[0];
    }
}

export { DnsCollection, DNS_COLLECTION_CODE_HEX }